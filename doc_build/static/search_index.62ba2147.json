[{"id":0,"title":"笔记简介","content":"#\n\n本文主要记录的是后端语言一些基础知识学习的相关笔记，包括 NestJS 但不仅仅限于 NestJS\n\n主要学习内容是参考官方文档和网络视频资源\n\n内容比较基础、零碎，记录下来方便后续快速回顾，加深印象\n\n\nNestJS 文档#\n\n官方文档：https://docs.nestjs.com/\n\n中文文档：http://nestjs.inode.club/\n\n\n开发工具#\n\nIntelliJ IDEA 或者 WebStorm\n\n优点：\n\n * 开箱即用、无需配置\n * 代码提示支持好\n\n缺点：\n\n * 付费\n\n\n数据库#\n\nMySQL + Navicat\n\n\nAPI 测试工具#\n\nApifox 中文界面，使用简单，支持快速 Mock，相比 Postman 更容易上手","routePath":"/blog/dev/","lang":"","toc":[{"text":"NestJS 文档","id":"nestjs-文档","depth":2,"charIndex":105},{"text":"开发工具","id":"开发工具","depth":2,"charIndex":181},{"text":"数据库","id":"数据库","depth":2,"charIndex":258},{"text":"API 测试工具","id":"api-测试工具","depth":2,"charIndex":282}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"安装","content":"快速开始#\n\n\n安装#\n\n\n前提#\n\nNode.js（版本 >= 16）\n\n\n脚手架#\n\n\n\n\n创建项目#\n\n使用  Nest CLI  构建的项目会创建一个初始的项目结构,并安装 node modules 和其他一些样板文件，然后创建一个  src/ \n目录，并增加几个核心文件。\n\n\n\n\n启动项目#\n\n\n\n在浏览器中打开  http://localhost:3000/\n\n\n常用命令#","routePath":"/blog/dev/nest/","lang":"","toc":[{"text":"前提","id":"前提","depth":2,"charIndex":13},{"text":"脚手架","id":"脚手架","depth":2,"charIndex":38},{"text":"创建项目","id":"创建项目","depth":2,"charIndex":47},{"text":"启动项目","id":"启动项目","depth":2,"charIndex":145},{"text":"常用命令","id":"常用命令","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"简介","content":"#\n\n本文档为 NextJs 学习手册\n\n内容为一些知识点的记录，方便使用中快速查找定位","routePath":"/blog/dev/next/0","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"路由篇之路由组","content":"#\n\nTIP\n\n文档：https://nextjs.org/docs/app/building-your-application/routing/route-groups\n\n\n路由组#\n\n在 app目录下，文件夹名称通常会被映射到 URL 中，但是可以将文件夹标记为路由组，阻止文件夹名称被映射到 URL 中。\n\n把文件夹用括号括住就可以标记为路由组，比如 (dashboard)\n\n使用路由组，你可以将路由和项目文件按照逻辑进行分组，但不会影响 URL 路径结构。路由组可用于比如：\n\n 1. 按站点、意图、团队等将路由分组\n 2. 在同一层级中创建多个布局，甚至是创建多个根布局","routePath":"/blog/dev/next/1","lang":"","toc":[{"text":"路由组","id":"路由组","depth":2,"charIndex":87}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"路由篇之动态路由","content":"#\n\nTIP\n\n文档：https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes\n\n\n使用场景#\n\n有的时候，并不能提前知道路由的地址，就比如根据 URL 中的 id 参数展示该 id\n对应的文章内容，文章那么多，我们不可能一一定义路由，这个时候就需要用到动态路由。\n\n\n动态路由#\n\n\n[FolderName]#\n\n使用动态路由，需要将文件夹的名字用方括号括住，比如 [id]、[slug]\n\n这个路由的名字会作为 param prop 传给布局（layout）、 页面（page）、 路由处理程序（route）以及\ngenerateMetadata（用于生成页面元数据） 函数\n\n\n\nExample\n\n路由                        URL 实例    PARAMS 参数\napp/blog/[slug]/page.js   /blog/a   { slug: 'a' }\napp/blog/[slug]/page.js   /blog/b   { slug: 'b' }\napp/blog/[slug]/page.js   /blog/c   { slug: 'c' }\n\n\n[...FolderName]#\n\n如果在方括号内添加省略号，比如 [...folderName]，这表示捕获所有后面所有的路由片段。\n\napp/blog/[...slug]/page.js会匹配 /blog/clothes，也会匹配\n/blog/clothes/tops、/blog/clothes/tops/t-shirts等\n\n注意： 不会匹配不带参数的地址，如app/blog\n\nExample\n\n路由                        URL 实例        PARAMS 参数\napp/blog/[slug]/page.js   /blog/a       { slug: ['a'] }\napp/blog/[slug]/page.js   /blog/a/b     { slug: ['a', 'b'] }\napp/blog/[slug]/page.js   /blog/a/b/c   { slug: ['a', 'b', 'c'] }\n\n\n[[...FolderName]]#\n\n如果在双方括号内添加省略号，比如 [[...folderName]]，这表示可选的捕获所有后面所有的路由片段。\n\n路由匹配方式与[...FloderName]相同\n\n与上一种的区别就在于，不带参数的路由也会被匹配，比如 app/blog\n\nExample\n\n路由                        URL 实例   PARAMS 参数\napp/blog/[slug]/page.js   /blog    { slug: [] }","routePath":"/blog/dev/next/2","lang":"","toc":[{"text":"使用场景","id":"使用场景","depth":2,"charIndex":89},{"text":"动态路由","id":"动态路由","depth":2,"charIndex":182},{"text":"[FolderName]","id":"foldername","depth":3,"charIndex":190},{"text":"[...FolderName]","id":"foldername","depth":3,"charIndex":547},{"text":"[[...FolderName]]","id":"foldername","depth":3,"charIndex":985}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"路由篇之平行路由","content":"#\n\nTIP\n\n文档：https://nextjs.org/docs/app/building-your-application/routing/parallel-routes\n\n\n平行路由#","routePath":"/blog/dev/next/3","lang":"","toc":[{"text":"平行路由","id":"平行路由","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"路由篇之拦截路由","content":"#\n\nTIP\n\n文档：https://nextjs.org/docs/app/building-your-application/routing/intercepting-ro\nutes\n\n\n拦截路由#","routePath":"/blog/dev/next/4","lang":"","toc":[{"text":"拦截路由","id":"拦截路由","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"UniApp 编译 APP 中 video 黑屏","content":"#\n\n\n问题描述#\n\n在 UniApp 中使用 video 组件，在编译 APP 后，在u-popup中无法正常显示视频,会出现黑屏。\n\n\n问题排查#\n\n在页面中通过硬编码测试，使用静态视频地址和后端返回的地址都可以正常显示和播放视频，但在u-popup无法正常显示，确定了问题原因\n\n\n解决方案#\n\n暂未找到可以在u-popup中正常显示 video 组件的解决方案\n\n而是通过改变交互的方式来解决问题：点击播放视频时，额外弹出一个视频详情进行自动播放","routePath":"/blog/note/bug/0","lang":"","toc":[{"text":"问题描述","id":"问题描述","depth":3,"charIndex":3},{"text":"问题排查","id":"问题排查","depth":3,"charIndex":69},{"text":"解决方案","id":"解决方案","depth":3,"charIndex":143}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"APP、H5  唤起软键盘问题","content":"APP、H5 唤起软键盘问题#\n\n\n问题#\n\n移动端点击输入框会自动唤起软键盘，此时如果页面有固定元素，会导致键盘盖住固定的元素。\n\n\n解决方案#\n\n方案一：监听输入框聚焦事件，当输入框聚焦时，适当增加页面滚动\n\n","routePath":"/blog/note/bug/1","lang":"","toc":[{"text":"问题","id":"问题","depth":3,"charIndex":17},{"text":"解决方案","id":"解决方案","depth":3,"charIndex":67}],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"Git 回退代码的几种方法","content":"#\n\n\n取消当前 commit 内容#\n\n\n\nDANGER\n\n注意：使用此命令，会丢失 commit 的最新代码，谨慎使用。\n\n\n撤销指定提交记录#\n\n这种方式比使用 git reset 命令更加安全，因为它不会改变提交历史，而是创建一个新的提交来撤销之前的修改。\n\n\n\n\n回退指定 commit 并删除提交记录#\n\n步骤：\n\n 1. 回退到指定 commit 提交记录\n 2. 强制推送代码，会删除指定 commit 后面的提交记录\n\n\n\nWARNING\n\ngit checkout 也可以进行代码回退，尚未亲自实践，如有兴趣请自行查找资料","routePath":"/blog/note/eg/0","lang":"","toc":[{"text":"取消当前 commit 内容","id":"取消当前-commit-内容","depth":3,"charIndex":3},{"text":"撤销指定提交记录","id":"撤销指定提交记录","depth":3,"charIndex":64},{"text":"回退指定 commit 并删除提交记录","id":"回退指定-commit-并删除提交记录","depth":3,"charIndex":136}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"APP 如何打开应用通知权限","content":"#\n\n\n#","routePath":"/blog/note/eg/1","lang":"","toc":[{"text":"","id":"","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"APP 增加权限获取说明","content":"#\n\n\n背景#\n\nAPP 上架华为应用商店需要说明获取权限的说明，否则上架失败。\n\n技术栈：UniApp Vue3 Vite\n\n\n资料#\n\n安卓权限标识：https://developer.android.com/reference/android/Manifest.permission\n(需要翻墙)\n\n\n踩坑#\n\n权限标识\n\n调用摄像头的权限：android.permission.CAMERA\n\n调用相册的权限：android.permission.READ_MEDIA_IMAGES\n\n在项目中使用uni.chooseImage()去获取相机、相册权限。获取相机权限正常，获取相册权限一直显示权限是永久关闭状态，手动去启用也无法正常使用。\n\n在网上查找到的资料使用的权限都是android.permission.READ_EXTERNAL_STORAGE\n\nDANGER\n\n但是READ_EXTERNAL_STORAGE在安卓 11(从 API 33 开始，此权限无效) 中已经失效了，需要使用READ_MEDIA_IMAGES、\nREAD_MEDIA_VIDEO、 READ_MEDIA_AUDIO\n\n最后，改成android.permission.READ_MEDIA_IMAGES可以正常获取权限，获取相册的内容。\n\n\n解决方案#\n\n> 插件中使用了plus，如果是多端项目需要进行条件判断\n\n使用插件：App 权限判断和提示\n\n代码\n\n\n其他方案#\n\nuni-registerRequestPermissionTips：以上面方案为基础进行的二开插件，与获取权限操作同步展示，但是获取摄像头权限不能正常使用，看后\n续会不会修复\n\n权限申请说明：通过对 UniApp API 的拦截,提前展示要获取的权限说明。 不用改动代码","routePath":"/blog/note/eg/2","lang":"","toc":[{"text":"背景","id":"背景","depth":3,"charIndex":3},{"text":"资料","id":"资料","depth":3,"charIndex":64},{"text":"踩坑","id":"踩坑","depth":3,"charIndex":153},{"text":"解决方案","id":"解决方案","depth":3,"charIndex":566},{"text":"其他方案","id":"其他方案","depth":3,"charIndex":626}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"JSON 导出 xlsx","content":"#\n\nTIP\n\n本案例只是一个 Demo，满足个人场景使用，经测试可以把 JSON 数据导出为 Excel 文件\n\n具体代码逻辑需要根据实际业务进行调整\n\n代码执行环境为 nodejs\n\n\n业务场景#\n\n将代码中配置好的 JSON 数据导出生成 Excel 类型的文件\n\n * 翻译多语言作为源文件提供\n\n\n安装#\n\nGithub 地址\n\n\n源数据#\n\n\n\n\n转换方法#\n\n\n\n\n使用#\n\n运行命令成功后，后生成zh.xlsx文件\n\n","routePath":"/blog/note/eg/3","lang":"","toc":[{"text":"业务场景","id":"业务场景","depth":3,"charIndex":94},{"text":"安装","id":"安装","depth":3,"charIndex":153},{"text":"源数据","id":"源数据","depth":3,"charIndex":170},{"text":"转换方法","id":"转换方法","depth":3,"charIndex":179},{"text":"使用","id":"使用","depth":3,"charIndex":189}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"浏览器控制台 Consloe.log 的高级样式","content":"#\n\n要为浏览器控制台的 console.log 输出样式化，可以使用 CSS 样式或者使用特殊的命令行工具。\n\n\n使用 CSS 样式#\n\n可以通过在 console.log()输出的字符串中添加 CSS 样式来实现样式化效果。下面是一个示例代码：\n\n\n\n在上面的代码中，我们通过%c 占位符来为输出的字符串添加样式。在%c 后面的引号内，可以添加任意的 CSS\n样式。上面的示例中，我们为字符串添加了蓝色的文字颜色、20px 的字体大小和黄色的背景色。\n\n\n使用特殊的命令行工具#\n\n有一些第三方的工具可以帮助我们在控制台中添加更高级的样式化效果，如 (chalk.js)[https://github.com/chalk/chalk] 和\n(ansi-colors)[https://github.com/doowb/ansi-colors]\n等。这些工具提供了更多的颜色和样式选项，使得控制台输出更加丰富。以下是一个使用 chalk.js 的示例代码：\n\n\n\n在上面的代码中，我们首先使用require()函数将 chalk.js 模块引入。然后，我们可以使用 chalk.blue()方法为输出的字符串添加蓝色样式。\n\n注意：在浏览器环境中使用这些命令行工具需要使用构建工具将代码打包后再在浏览器中运行。\n\n通过上述方法，你可以为浏览器控制台的 console.log 输出添加高级的样式化效果。\n\n\n效果预览#\n\n","routePath":"/blog/note/eg/4","lang":"","toc":[{"text":"使用 CSS 样式","id":"使用-css-样式","depth":3,"charIndex":57},{"text":"使用特殊的命令行工具","id":"使用特殊的命令行工具","depth":3,"charIndex":229},{"text":"效果预览","id":"效果预览","depth":3,"charIndex":604}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"笔记简介","content":"#\n\n主要记录开发中遇到问题的解决思路和方案, 也包含一些小工具的案例和开发环境的配置\n\n主要目的是为了提高开发效率","routePath":"/blog/note/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"Window PowerShell 检查更新","content":"#\n\nTIP\n\nPowerShell 发布页：https://github.com/PowerShell/PowerShell/releases/tag/v7.4.2\n\n\n查看当前版本#\n\n使用 PowerShell 终端输入指令, 终端将显示您当前的 PowerShell 版本号。\n\n\n\n\n搜索最新版本#\n\nwinget 是 Windows 自带的包管理器\n\n\n\n这个会显示最新版本的正常办和预览版\n\n\n\n\n安装新版本#\n\n\n\n\n验证更新#\n\n直接打开 powershell 并且输入$PSVersionTable.PSVersion\n\n> 可能看到版本号并没有改变 原因：5.1 和 7 版本可以共存","routePath":"/blog/note/os/0","lang":"","toc":[{"text":"查看当前版本","id":"查看当前版本","depth":3,"charIndex":85},{"text":"搜索最新版本","id":"搜索最新版本","depth":3,"charIndex":146},{"text":"安装新版本","id":"安装新版本","depth":3,"charIndex":205},{"text":"验证更新","id":"验证更新","depth":3,"charIndex":216}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"Windows11 修改右键菜单","content":"#\n\n\n方法一#\n\n先按住shift键再右键点击桌面\n\n\n方法二#\n\n通过 CMD 命令切换，使用管理员身份运行 CMD\n\n\n\n重启电脑就可以看到效果\n\n或者\n\n直接在 CMD 里输入重启菜单命令\n\n\n\nWARNING\n\n在使用第二种方法时，执行完第一条命令后可能会出现黑屏状态无法操作，重启电脑后重新运行命令就成功修改了右键菜单的状态\n\n","routePath":"/blog/note/os/1","lang":"","toc":[{"text":"方法一","id":"方法一","depth":3,"charIndex":3},{"text":"方法二","id":"方法二","depth":3,"charIndex":28}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"VSCode 编辑器设置","content":"#\n\n\n插件#\n\nTIP\n\n前端开发的一些常用插件，提高工作效率。\n\n\n基础#\n\n * Chinese (Simplified) (简体中文)\n\n\nGit 增强#\n\n * Git Graph：查看仓库的 Git Graph，并从图中轻松执行 Git 操作。\n * GitLens — Git supercharged：查看代码最近修改记录、修改人员\n * git-commit-plugin：自动生成git commit消息\n\n\n快速增效#\n\n * Turbo Console Log：快速console.log()\n\n * Code Spell Checker：单词拼写检查\n\n * Color Highlight：高亮代码中颜色\n\n * Image preview：预览代码中图片\n\n * Path Intellisense：代码路径提示\n\n * SVG：预览 SVG\n\n * IntelliJ IDEA Keybindings：IDEA 风格快捷键\n\n * Code Translate：鼠标悬浮显示翻译\n\n * Bookmarks：在代码中进行标记，通过标记快速跳转\n\n * GitHub Repositories：通过仓库地址浏览代码\n\n\n风格统一#\n\n * EditorConfig for VS Code：编辑器风格统一插件\n   \n   * 需在项目根目录配置.editorconfig\n\n * ESLint：代码风格检查工具\n   \n   * standard 规则\n\n * Prettier - Code formatter：代码格式化工具，可根据项目配置文件进行格式化风格统一\n   \n   * 文档\n   * 支持的文件类型\n   * 优先依据项目配置文件进行格式化\n\n\n主题#\n\n * GitHub Theme：Github 风格主题；有暗色和亮色\n * vscode-icons：vscode 文件图标\n * Error Lens：提供行内报错提示\n\n\n其他#\n\n * Draw.io Integration：画图插件\n * Partial Diff：代码对比\n * Live Server：快速开启服务器\n * i18n Ally：国际化翻译插件，可提高行内翻译提示\n   * 文档\n * UnoCSS\n   * 文档\n   * 快速查阅属性\n\n\nVue#\n\n * Vue - Official\n\n * Vue 3 Snippets\n\n * Vue VSCode Snippets\n\n\nAI 增强代码提示#\n\n * CodeGeeX：目前在用，免费功能够用\n\n * GitHub Copilot：Github 出品\n\n * Tabnine：代码提示过短（没有深度使用）\n\n * TONGYI Lingma：阿里出品\n\n\n编辑器设置#\n\n\n在 VSCode 中开启嵌入式（内联）提示#\n\n在 vscode 设置中搜索inlayHint，开启对应需要提示的选项，即可开启内联提示\n\n> 灰色部分为内联提示效果\n\n","routePath":"/blog/note/os/2","lang":"","toc":[{"text":"插件","id":"插件","depth":2,"charIndex":3},{"text":"基础","id":"基础","depth":3,"charIndex":35},{"text":"Git 增强","id":"git-增强","depth":3,"charIndex":73},{"text":"快速增效","id":"快速增效","depth":3,"charIndex":214},{"text":"风格统一","id":"风格统一","depth":3,"charIndex":524},{"text":"主题","id":"主题","depth":3,"charIndex":747},{"text":"其他","id":"其他","depth":3,"charIndex":840},{"text":"Vue","id":"vue","depth":3,"charIndex":988},{"text":"AI 增强代码提示","id":"ai-增强代码提示","depth":3,"charIndex":1057},{"text":"编辑器设置","id":"编辑器设置","depth":2,"charIndex":1174},{"text":"在 VSCode 中开启嵌入式（内联）提示","id":"在-vscode-中开启嵌入式内联提示","depth":3,"charIndex":1183}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"Windows 工具集合","content":"#","routePath":"/blog/tools/0","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"起步","content":"#\n\n\n脚手架安装#\n\n\n运行#","routePath":"/blog/tree/dev/1","lang":"","toc":[{"text":"脚手架安装","id":"脚手架安装","depth":2,"charIndex":3},{"text":"运行","id":"运行","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"基本布局","content":"#","routePath":"/blog/tree/dev/2","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"封装组件","content":"#","routePath":"/blog/tree/dev/3","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"数据库使用","content":"#\n\nTIP\n\n本项目中使用方式均为 Promise 方式\n\n\n工具库#\n\nMySQL2\n\n适用于Node.js的MySQL客户端，专注于性能优化。支持SQL预处理、非UTF-8编码支持、二进制文件编码支持、压缩和SSL等等。\n\n\n安装#\n\nMySQL2 可以跨平台使用，毫无疑问可以安装在 Linux、Mac OS 或 Windows 上。\n\n\n链接方式#\n\n参考文档\n\n> 项目中使用配置进行链接数据库\n\n通过 connectionUri 链接\n\nmysql://root:password@localhost:3306/test\n\n通过配置链接 PoolOptions\n\n\n\n\n封装方法#\n\n在 lib 目录下新增 db.js封装数据库链接方法，并在 env 或 next.config.mjs中的 env 添加数据库相关配置信息\n\n","routePath":"/blog/tree/dev/4","lang":"","toc":[{"text":"工具库","id":"工具库","depth":3,"charIndex":31},{"text":"安装","id":"安装","depth":3,"charIndex":115},{"text":"链接方式","id":"链接方式","depth":3,"charIndex":173},{"text":"封装方法","id":"封装方法","depth":3,"charIndex":291}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"项目简介","content":"#\n\nTIP\n\n运行此项目需要 node 18 以上\n\n植树 DEV 是个边学习边开发的个人练习项目。\n\n此项目会学习积累一些 React、NextJS、MySQL 相关经验，遇到的问题都会在对应的模块的笔记进行记录\n\n主要技术栈：NEXT14 + React18 + TailWind CSS + MySQL\n\n包管理工具：pnpm\n\n\n规划#\n\n\n开发工具#\n\nVSCode\n\nREST Client\n\nApifox","routePath":"/blog/tree/","lang":"","toc":[{"text":"规划","id":"规划","depth":2,"charIndex":169},{"text":"开发工具","id":"开发工具","depth":2,"charIndex":175}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"我也是知识点","content":"#","routePath":"/blog/web/css/0","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"笔记简介","content":"#\n\n前端笔记主要记录前端相关的知识点\n\n包括但不限于框架的学习与使用，常用工具库的收集与使用，知识技能使用与快速查阅等\n\n内容不断添加丰富...","routePath":"/blog/web/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"知识点","content":"#","routePath":"/blog/web/react/0","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"工具库汇总","content":"#\n\n * Classnames 可以在标签中动态添加className\n * react-markdown React 组件渲染 markdown\n * ahooks 一套高质量可靠的 React Hooks 库","routePath":"/blog/web/react/29","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"全都是知识点","content":"#","routePath":"/blog/web/vue/0","lang":"","toc":[],"domain":"","frontmatter":{},"version":""}]